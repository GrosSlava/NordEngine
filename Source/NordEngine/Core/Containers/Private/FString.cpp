// Copyright Nord Engine. All Rights Reserved.
#include "FString.h"

#include "AssertionMacros.h"





int32 FString::ParseIntoArray(TArray<FString>& OutArray, const TCHAR* pchDelim, bool InCullEmpty) const noexcept
{
	// Make sure the delimit string is not null or empty
	check(pchDelim);

	OutArray.Reset();

	const TCHAR* Start = GetStr();
	const int32 DelimLength = FPlatformString::Strlen(pchDelim);
	if( Start && *Start != TEXT('\0') && DelimLength )
	{
		while( const TCHAR* At = FPlatformString::Strstr(Start, pchDelim) )
		{
			if( !InCullEmpty || At - Start )
			{
				OutArray.Add(FString(Start, static_cast<uint32>(At - Start)));
			}

			Start = At + DelimLength;
		}

		if( !InCullEmpty || *Start )
		{
			OutArray.PushBack(FString(Start));
		}
	}

	return OutArray.Num();
}

void FString::ReverseString() noexcept
{
	if( IsEmpty() ) return;

	TCHAR* StartChar = StringBuffer.GetAtByPointer(0);
	TCHAR* EndChar = StringBuffer.GetAtByPointer(Length() - 1);
	TCHAR TempChar;
	do
	{
		TempChar = *StartChar; // store the current value of StartChar
		*StartChar = *EndChar; // change the value of StartChar to the value of EndChar
		*EndChar = TempChar;   // change the value of EndChar to the character that was previously at StartChar

		++StartChar;
		--EndChar;

	} while( StartChar < EndChar ); // repeat until we've reached the midpoint of the string
}

int32 FString::ReplaceInline(const TCHAR* SearchText, const TCHAR* ReplacementText, ESearchCase SearchCase) noexcept
{
	//TODO

	return 0;
}

static const TCHAR* CharToEscapeSeqMap[][2] = {
	// Always replace \\ first to avoid double-escaping characters
	{TEXT("\\"), TEXT("\\\\")}, {TEXT("\n"), TEXT("\\n")}, {TEXT("\r"), TEXT("\\r")}, {TEXT("\t"), TEXT("\\t")}, {TEXT("\'"), TEXT("\\'")}, {TEXT("\""), TEXT("\\\"")}};

static const uint32 MaxSupportedEscapeChars = 6;

FString FString::ReplaceCharWithEscapedChar(const TArray<TCHAR>* Chars) && noexcept
{
	if( Length() > 0 && (Chars == nullptr || Chars->Num() > 0) )
	{
		FString Result(*this);
		for( int32 ChIdx = 0; ChIdx < MaxSupportedEscapeChars; ++ChIdx )
		{
			if( Chars == nullptr || Chars->Contains(*(CharToEscapeSeqMap[ChIdx][0])) )
			{
				// use ReplaceInline as that won't create a copy of the string if the character isn't found
				Result.ReplaceInline(CharToEscapeSeqMap[ChIdx][0], CharToEscapeSeqMap[ChIdx][1]);
			}
		}
		return Result;
	}

	return *this;
}

FString FString::ReplaceEscapedCharWithChar(const TArray<TCHAR>* Chars) && noexcept
{
	if( Length() > 0 && (Chars == nullptr || Chars->Num() > 0) )
	{
		// Spin CharToEscapeSeqMap backwards to ensure we're doing the inverse of ReplaceCharWithEscapedChar
		for( int32 ChIdx = MaxSupportedEscapeChars - 1; ChIdx >= 0; --ChIdx )
		{
			if( Chars == nullptr || Chars->Contains(*(CharToEscapeSeqMap[ChIdx][0])) )
			{
				// use ReplaceInline as that won't create a copy of the string if the character isn't found
				ReplaceInline(CharToEscapeSeqMap[ChIdx][1], CharToEscapeSeqMap[ChIdx][0]);
			}
		}
	}

	return MoveTemp(*this);
}

void FString::ConvertTabsToSpacesInline(const uint32 SpacesPerTab) noexcept
{
	//must call this with at least 1 space so the modulus operation works
	if( SpacesPerTab == 0 ) return;

	FString Result;
	Result.Reserve(Length());

	TCHAR* p = begin();
	while( p != end() )
	{
		if( *p == TEXT('\t') )
		{
			Result.AddInitialized(SpacesPerTab, TEXT(' '));
		}
		else
		{
			Result += *p;
		}
	}

	*this = MoveTemp(Result);
}

int32 FString::Find(const TCHAR* SubStr, ESearchCase SearchCase, ESearchDir SearchDir, int32 StartPosition) const noexcept
{
	if( SubStr == nullptr ) return -1;

	if( SearchDir == ESearchDir::FromStart )
	{
		const TCHAR* Start = (*this).GetStr();
		if( StartPosition != -1 )
		{
			Start += FMath::Clamp(StartPosition, 0, (int32)Length() - 1);
		}

		const TCHAR* Tmp = SearchCase == ESearchCase::IgnoreCase ? Stristr(Start, SubStr) : FPlatformString::Strstr(Start, SubStr);

		return Tmp ? static_cast<int32>((Tmp - (*this).GetStr())) : -1;
	}
	else
	{
		// if ignoring, do a onetime ToUpper on both strings, to avoid ToUppering multiple
		// times in the loop below
		if( SearchCase == ESearchCase::IgnoreCase )
		{
			return ToUpper().Find(FString(SubStr).ToUpper(), ESearchCase::CaseSensitive, SearchDir, StartPosition);
		}
		else
		{
			const int32 SearchStringLength = FMath::Max(1, FPlatformString::Strlen(SubStr));

			if( StartPosition == -1 || StartPosition >= (int32)Length() )
			{
				StartPosition = Length();
			}

			for( int32 i = StartPosition - SearchStringLength; i >= 0; --i )
			{
				int32 j;
				for( j = 0; SubStr[j]; ++j )
				{
					if( (*this)[i + j] != SubStr[j] )
					{
						break;
					}
				}

				if( !SubStr[j] )
				{
					return i;
				}
			}

			return -1;
		}
	}
}

void FString::AppendInt(int64 Num) noexcept
{
	const TCHAR* DigitToChar = TEXT("9876543210123456789");
	constexpr int32 ZeroDigitIndex = 9;
	bool bIsNumberNegative = Num < 0;
	const int32 TempBufferSize = 24; // 24 is big enough
	TCHAR TempNum[TempBufferSize];
	int32 TempAt = TempBufferSize; // fill the temp string from the top down.

	// Convert to string assuming base ten.
	do
	{
		TempNum[--TempAt] = DigitToChar[ZeroDigitIndex + (Num % 10)];
		Num /= 10;
	} while( Num );

	if( bIsNumberNegative )
	{
		TempNum[--TempAt] = TEXT('-');
	}

	const TCHAR* CharPtr = TempNum + TempAt;
	const int32 NumChars = TempBufferSize - TempAt;

	*this += FString(CharPtr, NumChars);
}

void FString::AppendHexInt(uint64 Num) noexcept
{
	const TCHAR* DigitToChar = TEXT("FEDCBA9876543210123456789ABCDEF");
	constexpr int32 ZeroDigitIndex = 15;
	const int32 TempBufferSize = 24; // 24 is big enough
	TCHAR TempNum[TempBufferSize];
	int32 TempAt = TempBufferSize; // fill the temp string from the top down.

	// Convert to string assuming base ten.
	do
	{
		TempNum[--TempAt] = DigitToChar[ZeroDigitIndex + (Num % 16)];
		Num /= 16;
	} while( Num );

	const TCHAR* CharPtr = TempNum + TempAt;
	const int32 NumChars = TempBufferSize - TempAt;

	*this += FString(CharPtr, NumChars);
}

bool FString::IsNumeric() const noexcept
{
	if( IsEmpty() )
	{
		return false;
	}

	TCHAR* LStrPointer = GetBuffer();
	if( *LStrPointer == '-' || *LStrPointer == '+' )
	{
		++LStrPointer;
	}

	bool bHasDot = false;
	while( *LStrPointer != '\0' )
	{
		if( *LStrPointer == '.' )
		{
			if( bHasDot )
			{
				return false;
			}
			bHasDot = true;
		}
		else if( !FChar::IsDigit(*LStrPointer) )
		{
			return false;
		}

		++LStrPointer;
	}

	return true;
}





FString FString::FormatAsNumber(int32 InNumber) noexcept
{
	FString Number = FString::FromInt(InNumber);
	FString Result;

	int32 dec = 0;
	for( int32 x = Number.Length() - 1; x > -1; --x )
	{
		Result += Number.Mid(x, 1);

		++dec;
		if( dec == 3 && x > 0 )
		{
			Result += TEXT(",");
			dec = 0;
		}
	}

	return Result.Reverse();
}

FString FString::SanitizeFloat(double InFloat, const int32 InMinFractionalDigits) noexcept
{
	// Avoids negative zero
	if( InFloat == 0 )
	{
		InFloat = 0;
	}

	// First create the string
	TCHAR Buff[256];
	FPlatformString::Printf(Buff, 256, TEXT("%f"), InFloat);

	FString TempString(Buff);
	if( !TempString.IsNumeric() )
	{
		// String did not format as a valid decimal number so avoid messing with it
		return TempString;
	}


	// Trim all trailing zeros (up-to and including the decimal separator) from the fractional part of the number
	int32 TrimIndex = -1;
	int32 DecimalSeparatorIndex = -1;
	for( int32 CharIndex = TempString.Length() - 1; CharIndex >= 0; --CharIndex )
	{
		const TCHAR Char = TempString[CharIndex];
		if( Char == TEXT('.') )
		{
			DecimalSeparatorIndex = CharIndex;
			TrimIndex = FMath::Max(TrimIndex, DecimalSeparatorIndex);
			break;
		}
		if( TrimIndex == -1 && Char != TEXT('0') )
		{
			TrimIndex = CharIndex + 1;
		}
	}

	TempString.RemoveAt(TrimIndex, TempString.Length() - TrimIndex);

	// Pad the number back to the minimum number of fractional digits
	if( InMinFractionalDigits > 0 )
	{
		if( TrimIndex == DecimalSeparatorIndex )
		{
			// Re-add the decimal separator
			TempString += TEXT('.');
		}

		const int32 NumFractionalDigits = (TempString.Length() - DecimalSeparatorIndex) - 1;
		const int32 FractionalDigitsToPad = InMinFractionalDigits - NumFractionalDigits;
		if( FractionalDigitsToPad > 0 )
		{
			for( int32 Cx = 0; Cx < FractionalDigitsToPad; ++Cx )
			{
				TempString += TEXT('0');
			}
		}
	}

	return TempString;
}




// clang-format off
const uint64 FString_Private::StringP[] = 
{
	0x1, 0x10001, 0x100020001, 0x1000300030001, 0x4000600040001, 0xa000a00050001, 0x14000f00060001, 0x23001500070001, 0x38001c00080001, 0x54002400090001, 0x78002d000a0001, 0xa50037000b0001, 0xdc0042000c0001, 0x11e004e000d0001, 0x16c005b000e0001, 0x1c70069000f0001, 
	0x230007800100001, 0x2a8008800110001, 0x330009900120001, 0x3c900ab00130001, 0x47400be00140001, 0x53200d200150001, 0x60400e700160001, 0x6eb00fd00170001, 0x7e8011400180001, 0x8fc012c00190001, 0xa280145001a0001, 0xb6d015f001b0001, 0xccc017a001c0001, 0xe460196001d0001, 0xfdc01b3001e0001, 0x118f01d1001f0001, 
	0x136001f000200001, 0x1550021000210001, 0x1760023100220001, 0x1991025300230001, 0x1be4027600240001, 0x1e5a029a00250001, 0x20f402bf00260001, 0x23b302e500270001, 0x2698030c00280001, 0x29a4033400290001, 0x2cd8035d002a0001, 0x30350387002b0001, 0x33bc03b2002c0001, 0x376e03de002d0001, 0x3b4c040b002e0001, 0x3f570439002f0001, 
	0x4390046800300001, 0x47f8049800310001, 0x4c9004c900320001, 0x515904fb00330001, 0x5654052e00340001, 0x5b82056200350001, 0x60e4059700360001, 0x667b05cd00370001, 0x6c48060400380001, 0x724c063c00390001, 0x78880675003a0001, 0x7efd06af003b0001, 0x85ac06ea003c0001, 0x8c960726003d0001, 0x93bc0763003e0001, 0x9b1f07a1003f0001, 
	0xa2c007e000400001, 0xaaa0082000410001, 0xb2c0086100420001, 0xbb2108a300430001, 0xc3c408e600440001, 0xccaa092a00450001, 0xd5d4096f00460001, 0xdf4309b500470001, 0xe8f809fc00480001, 0xf2f40a4400490001, 0xfd380a8d004a0001, 0x7c50ad7004b0001, 0x129c0b22004c0001, 0x1dbe0b6e004d0001, 0x292c0bbb004e0001, 0x34e70c09004f0001, 
	0x40f00c5800500001, 0x4d480ca800510001, 0x59f00cf900520001, 0x66e90d4b00530001, 0x74340d9e00540001, 0x81d20df200550001, 0x8fc40e4700560001, 0x9e0b0e9d00570001, 0xaca80ef400580001, 0xbb9c0f4c00590001, 0xcae80fa5005a0001, 0xda8d0fff005b0001, 0xea8c105a005c0001, 0xfae610b6005d0001, 0xb9c1113005e0001, 0x1caf1171005f0001, 
	0x2e2011d000600001, 0x3ff0123000610001, 0x5220129100620001, 0x64b112f300630001, 0x77a4135600640001, 0x8afa13ba00650001, 0x9eb4141f00660001, 0xb2d3148500670001, 0xc75814ec00680001, 0xdc44155400690001, 0xf19815bd006a0001, 0x7551627006b0001, 0x1d7c1692006c0001, 0x340e16fe006d0001, 0x4b0c176b006e0001, 0x627717d9006f0001, 
	0x7a50184800700001, 0x929818b800710001, 0xab50192900720001, 0xc479199b00730001, 0xde141a0e00740001, 0xf8221a8200750001, 0x12a41af700760001, 0x2d9b1b6d00770001, 0x49081be400780001, 0x64ec1c5c00790001, 0x81481cd5007a0001, 0x9e1d1d4f007b0001, 0xbb6c1dca007c0001, 0xd9361e46007d0001, 0xf77c1ec3007e0001, 0x163f1f41007f0001, 
	0x35801fc000800001, 0x5540204000810001, 0x758020c100820001, 0x9641214300830001, 0xb78421c600840001, 0xd94a224a00850001, 0xfb9422cf00860001, 0x1e63235500870001, 0x41b823dc00880001, 0x6594246400890001, 0x89f824ed008a0001, 0xaee52577008b0001, 0xd45c2602008c0001, 0xfa5e268e008d0001, 0x20ec271b008e0001, 0x480727a9008f0001, 
	0x6fb0283800900001, 0x97e828c800910001, 0xc0b0295900920001, 0xea0929eb00930001, 0x13f42a7e00940001, 0x3e722b1200950001, 0x69842ba700960001, 0x952b2c3d00970001, 0xc1682cd400980001, 0xee3c2d6c00990001, 0x1ba82e05009a0001, 0x49ad2e9f009b0001, 0x784c2f3a009c0001, 0xa7862fd6009d0001, 0xd75c3073009e0001, 0x7cf3111009f0001, 
	0x38e031b000a00001, 0x6a90325000a10001, 0x9ce032f100a20001, 0xcfd1339300a30001, 0x364343600a40001, 0x379a34da00a50001, 0x6c74357f00a60001, 0xa1f3362500a70001, 0xd81836cc00a80001, 0xee4377400a90001, 0x4658381d00aa0001, 0x7e7538c700ab0001, 0xb73c397200ac0001, 0xf0ae3a1e00ad0001, 0x2acc3acb00ae0001, 0x65973b7900af0001, 
	0xa1103c2800b00001, 0xdd383cd800b10001, 0x1a103d8900b20001, 0x57993e3b00b30001, 0x95d43eee00b40001, 0xd4c23fa200b50001, 0x1464405700b60001, 0x54bb410d00b70001, 0x95c841c400b80001, 0xd78c427c00b90001, 0x1a08433500ba0001, 0x5d3d43ef00bb0001, 0xa12c44aa00bc0001, 0xe5d6456600bd0001, 0x2b3c462300be0001, 0x715f46e100bf0001, 
	0xb84047a000c00001, 0xffe0486000c10001, 0x4840492100c20001, 0x916149e300c30001, 0xdb444aa600c40001, 0x25ea4b6a00c50001, 0x71544c2f00c60001, 0xbd834cf500c70001, 0xa784dbc00c80001, 0x58344e8400c90001, 0xa6b84f4d00ca0001, 0xf605501700cb0001, 0x461c50e200cc0001, 0x96fe51ae00cd0001, 0xe8ac527b00ce0001, 0x3b27534900cf0001, 
	0x8e70541800d00001, 0xe28854e800d10001, 0x377055b900d20001, 0x8d29568b00d30001, 0xe3b4575e00d40001, 0x3b12583200d50001, 0x9344590700d60001, 0xec4b59dd00d70001, 0x46285ab400d80001, 0xa0dc5b8c00d90001, 0xfc685c6500da0001, 0x58cd5d3f00db0001, 0xb60c5e1a00dc0001, 0x14265ef600dd0001, 0x731c5fd300de0001, 0xd2ef60b100df0001, 
	0x33a0619000e00001, 0x9530627000e10001, 0xf7a0635100e20001, 0x5af1643300e30001, 0xbf24651600e40001, 0x243a65fa00e50001, 0x8a3466df00e60001, 0xf11367c500e70001, 0x58d868ac00e80001, 0xc184699400e90001, 0x2b186a7d00ea0001, 0x95956b6700eb0001, 0xfc6c5200ec0001, 0x6d4e6d3e00ed0001, 0xda8c6e2b00ee0001, 0x48b76f1900ef0001, 
	0xb7d0700800f00001, 0x27d870f800f10001, 0x98d071e900f20001, 0xab972db00f30001, 0x7d9473ce00f40001, 0xf16274c200f50001, 0x662475b700f60001, 0xdbdb76ad00f70001, 0x528877a400f80001, 0xca2c789c00f90001, 0x42c8799500fa0001, 0xbc5d7a8f00fb0001, 0x36ec7b8a00fc0001, 0xb2767c8600fd0001, 0x2efc7d8300fe0001, 0xac7f7e8100ff0001, 
	0x2b007f8001000001, 0xaa80808001010001, 0x2b00818101020001, 0xac81828301030001, 0x2f04838601040001, 0xb28a848a01050001, 0x3714858f01060001, 0xbca3869501070001, 0x4338879c01080001, 0xcad488a401090001, 0x537889ad010a0001, 0xdd258ab7010b0001, 0x67dc8bc2010c0001, 0xf39e8cce010d0001, 0x806c8ddb010e0001, 0xe478ee9010f0001, 
	0x9d308ff801100001, 0x2d28910801110001, 0xbe30921901120001, 0x5049932b01130001, 0xe374943e01140001, 0x77b2955201150001, 0xd04966701160001, 0xa36b977d01170001, 0x3ae8989401180001, 0xd37c99ac01190001, 0x6d289ac5011a0001, 0x7ed9bdf011b0001, 0xa3cc9cfa011c0001, 0x40c69e16011d0001, 0xdedc9f33011e0001, 0x7e0fa051011f0001, 
	0x1e60a17001200001, 0xbfd0a29001210001, 0x6260a3b101220001, 0x611a4d301230001, 0xaae4a5f601240001, 0x50daa71a01250001, 0xf7f4a83f01260001, 0xa033a96501270001, 0x4998aa8c01280001, 0xf424abb401290001, 0x9fd8acdd012a0001, 0x4cb5ae07012b0001, 0xfabcaf32012c0001, 0xa9eeb05e012d0001, 0x5a4cb18b012e0001, 0xbd7b2b9012f0001, 
	0xbe90b3e801300001, 0x7278b51801310001, 0x2790b64901320001, 0xddd9b77b01330001, 0x9554b8ae01340001, 0x4e02b9e201350001, 0x7e4bb1701360001, 0xc2fbbc4d01370001, 0x7f48bd8401380001, 0x3cccbebc01390001, 0xfb88bff5013a0001, 0xbb7dc12f013b0001, 0x7cacc26a013c0001, 0x3f16c3a6013d0001, 0x2bcc4e3013e0001, 0xc79fc621013f0001, 
	0x8dc0c76001400001, 0x5520c8a001410001, 0x1dc0c9e101420001, 0xe7a1cb2301430001, 0xb2c4cc6601440001, 0x7f2acdaa01450001, 0x4cd4ceef01460001, 0x1bc3d03501470001, 0xebf8d17c01480001, 0xbd74d2c401490001, 0x9038d40d014a0001, 0x6445d557014b0001, 0x399cd6a2014c0001, 0x103ed7ee014d0001, 0xe82cd93b014e0001, 0xc167da89014f0001, 
	0x9bf0dbd801500001, 0x77c8dd2801510001, 0x54f0de7901520001, 0x3369dfcb01530001, 0x1334e11e01540001, 0xf452e27201550001, 0xd6c4e3c701560001, 0xba8be51d01570001, 0x9fa8e67401580001, 0x861ce7cc01590001, 0x6de8e925015a0001, 0x570dea7f015b0001, 0x418cebda015c0001, 0x2d66ed36015d0001, 0x1a9cee93015e0001, 0x92feff1015f0001, 
	0xf920f15001600001, 0xea70f2b001610001, 0xdd20f41101620001, 0xd131f57301630001, 0xc6a4f6d601640001, 0xbd7af83a01650001, 0xb5b4f99f01660001, 0xaf53fb0501670001, 0xaa58fc6c01680001, 0xa6c4fdd401690001, 0xa498ff3d016a0001, 0xa3d600a7016b0001, 0xa47d0212016c0001, 0xa68f037e016d0001, 0xaa0d04eb016e0001, 0xaef80659016f0001, 
	0xb55107c801700001, 0xbd19093801710001, 0xc6510aa901720001, 0xd0fa0c1b01730001, 0xdd150d8e01740001, 0xeaa30f0201750001, 0xf9a5107701760001, 0xa1c11ed01770001, 0x1c09136401780001, 0x2f6d14dc01790001, 0x44491655017a0001, 0x5a9e17cf017b0001, 0x726d194a017c0001, 0x8bb71ac6017d0001, 0xa67d1c43017e0001, 0xc2c01dc1017f0001, 
	0xe0811f4001800001, 0xffc120c001810001, 0x2081224101820001, 0x42c223c301830001, 0x6685254601840001, 0x8bcb26ca01850001, 0xb295284f01860001, 0xdae429d501870001, 0x4b92b5c01880001, 0x30152ce401890001, 0x5cf92e6d018a0001, 0x8b662ff7018b0001, 0xbb5d3182018c0001, 0xecdf330e018d0001, 0x1fed349b018e0001, 0x54883629018f0001, 
	0x8ab137b801900001, 0xc269394801910001, 0xfbb13ad901920001, 0x368a3c6b01930001, 0x72f53dfe01940001, 0xb0f33f9201950001, 0xf085412701960001, 0x31ac42bd01970001, 0x7469445401980001, 0xb8bd45ec01990001, 0xfea94785019a0001, 0x462e491f019b0001, 0x8f4d4aba019c0001, 0xda074c56019d0001, 0x265d4df3019e0001, 0x74504f91019f0001, 
	0xc3e1513001a00001, 0x151152d001a10001, 0x67e1547101a20001, 0xbc52561301a30001, 0x126557b601a40001, 0x6a1b595a01a50001, 0xc3755aff01a60001, 0x1e745ca501a70001, 0x7b195e4c01a80001, 0xd9655ff401a90001, 0x3959619d01aa0001, 0x9af6634701ab0001, 0xfe3d64f201ac0001, 0x632f669e01ad0001, 0xc9cd684b01ae0001, 0x321869f901af0001, 
	0x9c116ba801b00001, 0x7b96d5801b10001, 0x75116f0901b20001, 0xe41a70bb01b30001, 0x54d5726e01b40001, 0xc743742201b50001, 0x3b6575d701b60001, 0xb13c778d01b70001, 0x28c9794401b80001, 0xa20d7afc01b90001, 0x1d097cb501ba0001, 0x99be7e6f01bb0001, 0x182d802a01bc0001, 0x985781e601bd0001, 0x1a3d83a301be0001, 0x9de0856101bf0001, 
	0x2341872001c00001, 0xaa6188e001c10001, 0x33418aa101c20001, 0xbde28c6301c30001, 0x4a458e2601c40001, 0xd86b8fea01c50001, 0x685591af01c60001, 0xfa04937501c70001, 0x8d79953c01c80001, 0x22b5970401c90001, 0xb9b998cd01ca0001, 0x52869a9701cb0001, 0xed1d9c6201cc0001, 0x897f9e2e01cd0001, 0x27ad9ffb01ce0001, 0xc7a8a1c901cf0001, 
	0x6971a39801d00001, 0xd09a56801d10001, 0xb271a73901d20001, 0x59aaa90b01d30001, 0x2b5aade01d40001, 0xad93acb201d50001, 0x5a45ae8701d60001, 0x8ccb05d01d70001, 0xb929b23401d80001, 0x6b5db40c01d90001, 0x1f69b5e501da0001, 0xd54eb7bf01db0001, 0x8d0db99a01dc0001, 0x46a7bb7601dd0001, 0x21dbd5301de0001, 0xbf70bf3101df0001, 
	0x7ea1c11001e00001, 0x3fb1c2f001e10001, 0x2a1c4d101e20001, 0xc772c6b301e30001, 0x8e25c89601e40001, 0x56bbca7a01e50001, 0x2135cc5f01e60001, 0xed94ce4501e70001, 0xbbd9d02c01e80001, 0x8c05d21401e90001, 0x5e19d3fd01ea0001, 0x3216d5e701eb0001, 0x7fdd7d201ec0001, 0xdfcfd9be01ed0001, 0xb98ddbab01ee0001, 0x9538dd9901ef0001, 
	0x72d1df8801f00001, 0x5259e17801f10001, 0x33d1e36901f20001, 0x173ae55b01f30001, 0xfc95e74e01f40001, 0xe3e3e94201f50001, 0xcd25eb3701f60001, 0xb85ced2d01f70001, 0xa589ef2401f80001, 0x94adf11c01f90001, 0x85c9f31501fa0001, 0x78def50f01fb0001, 0x6dedf70a01fc0001, 0x64f7f90601fd0001, 0x5dfdfb0301fe0001, 0x5900fd0101ff0001, 
	0x5601ff0002000001, 0x5502010002010001, 0x5602030102020001, 0x5903050302030001, 0x5e06070602040001, 0x650c090a02050001, 0x6e160b0f02060001, 0x79250d1502070001, 0x863a0f1c02080001, 0x9556112402090001, 0xa67a132d020a0001, 0xb9a71537020b0001, 0xcede1742020c0001, 0xe620194e020d0001, 0xff6e1b5b020e0001, 0x1ac91d69020f0001, 
	0x38321f7802100001, 0x57aa218802110001, 0x7932239902120001, 0x9ccb25ab02130001, 0xc27627be02140001, 0xea3429d202150001, 0x14062be702160001, 0x3fed2dfd02170001, 0x6dea301402180001, 0x9dfe322c02190001, 0xd02a3445021a0001, 0x46f365f021b0001, 0x3ace387a021c0001, 0x73483a96021d0001, 0xadde3cb3021e0001, 0xea913ed1021f0001, 
	0x296240f002200001, 0x6a52431002210001, 0xad62453102220001, 0xf293475302230001, 0x39e6497602240001, 0x835c4b9a02250001, 0xcef64dbf02260001, 0x1cb54fe502270001, 0x6c9a520c02280001, 0xbea6543402290001, 0x12da565d022a0001, 0x69375887022b0001, 0xc1be5ab2022c0001, 0x1c705cde022d0001, 0x794e5f0b022e0001, 0xd8596139022f0001, 
	0x3992636802300001, 0x9cfa659802310001, 0x29267c902320001, 0x6a5b69fb02330001, 0xd4566c2e02340001, 0x40846e6202350001, 0xaee6709702360001, 0x1f7d72cd02370001, 0x924a750402380001, 0x74e773c02390001, 0x7e8a7975023a0001, 0xf7ff7baf023b0001, 0x73ae7dea023c0001, 0xf1988026023d0001, 0x71be8263023e0001, 0xf42184a1023f0001, 
	0x78c286e002400001, 0xffa2892002410001, 0x88c28b6102420001, 0x14238da302430001, 0xa1c68fe602440001, 0x31ac922a02450001, 0xc3d6946f02460001, 0x584596b502470001, 0xeefa98fc02480001, 0x87f69b4402490001, 0x233a9d8d024a0001, 0xc0c79fd7024b0001, 0x609ea222024c0001, 0x2c0a46e024d0001, 0xa72ea6bb024e0001, 0x4de9a909024f0001, 
	0xf6f2ab5802500001, 0xa24aada802510001, 0x4ff2aff902520001, 0xffebb24b02530001, 0xb236b49e02540001, 0x66d4b6f202550001, 0x1dc6b94702560001, 0xd70dbb9d02570001, 0x92aabdf402580001, 0x509ec04c02590001, 0x10eac2a5025a0001, 0xd38fc4ff025b0001, 0x988ec75a025c0001, 0x5fe8c9b6025d0001, 0x299ecc13025e0001, 0xf5b1ce71025f0001, 
	0xc422d0d002600001, 0x94f2d33002610001, 0x6822d59102620001, 0x3db3d7f302630001, 0x15a6da5602640001, 0xeffcdcba02650001, 0xccb6df1f02660001, 0xabd5e18502670001, 0x8d5ae3ec02680001, 0x7146e65402690001, 0x579ae8bd026a0001, 0x4057eb27026b0001, 0x2b7eed92026c0001, 0x1910effe026d0001, 0x90ef26b026e0001, 0xfb79f4d9026f0001, 
	0xf052f74802700001, 0xe79af9b802710001, 0xe152fc2902720001, 0xdd7bfe9b02730001, 0xdc17010e02740001, 0xdd25038202750001, 0xe0a705f702760001, 0xe69e086d02770001, 0xef0b0ae402780001, 0xf9ef0d5c02790001, 0x74b0fd5027a0001, 0x1720124f027b0001, 0x296f14ca027c0001, 0x3e391746027d0001, 0x557f19c3027e0001, 0x6f421c41027f0001, 
	0x8b831ec002800001, 0xaa43214002810001, 0xcb8323c102820001, 0xef44264302830001, 0x158728c602840001, 0x3e4d2b4a02850001, 0x69972dcf02860001, 0x9766305502870001, 0xc7bb32dc02880001, 0xfa97356402890001, 0x2ffb37ed028a0001, 0x67e83a77028b0001, 0xa25f3d02028c0001, 0xdf613f8e028d0001, 0x1eef421b028e0001, 0x610a44a9028f0001, 
	0xa5b3473802900001, 0xeceb49c802910001, 0x36b34c5902920001, 0x830c4eeb02930001, 0xd1f7517e02940001, 0x2375541202950001, 0x778756a702960001, 0xce2e593d02970001, 0x276b5bd402980001, 0x833f5e6c02990001, 0xe1ab6105029a0001, 0x42b0639f029b0001, 0xa64f663a029c0001, 0xc8968d6029d0001, 0x755f6b73029e0001, 0xe0d26e11029f0001, 
	0x4ee370b002a00001, 0xbf93735002a10001, 0x32e375f102a20001, 0xa8d4789302a30001, 0x21677b3602a40001, 0x9c9d7dda02a50001, 0x1a77807f02a60001, 0x9af6832502a70001, 0x1e1b85cc02a80001, 0xa3e7887402a90001, 0x2c5b8b1d02aa0001, 0xb7788dc702ab0001, 0x453f907202ac0001, 0xd5b1931e02ad0001, 0x68cf95cb02ae0001, 0xfe9a987902af0001, 
	0x97139b2802b00001, 0x323b9dd802b10001, 0xd013a08902b20001, 0x709ca33b02b30001, 0x13d7a5ee02b40001, 0xb9c5a8a202b50001, 0x6267ab5702b60001, 0xdbeae0d02b70001, 0xbbcbb0c402b80001, 0x6c8fb37c02b90001, 0x200bb63502ba0001, 0xd640b8ef02bb0001, 0x8f2fbbaa02bc0001, 0x4ad9be6602bd0001, 0x93fc12302be0001, 0xca62c3e102bf0001, 
	0x8e43c6a002c00001, 0x54e3c96002c10001, 0x1e43cc2102c20001, 0xea64cee302c30001, 0xb947d1a602c40001, 0x8aedd46a02c50001, 0x5f57d72f02c60001, 0x3686d9f502c70001, 0x107bdcbc02c80001, 0xed37df8402c90001, 0xccbbe24d02ca0001, 0xaf08e51702cb0001, 0x941fe7e202cc0001, 0x7c01eaae02cd0001, 0x66afed7b02ce0001, 0x542af04902cf0001, 
	0x4473f31802d00001, 0x378bf5e802d10001, 0x2d73f8b902d20001, 0x262cfb8b02d30001, 0x21b7fe5e02d40001, 0x2016013202d50001, 0x2148040702d60001, 0x254f06dd02d70001, 0x2c2c09b402d80001, 0x35e00c8c02d90001, 0x426c0f6502da0001, 0x51d1123f02db0001, 0x6410151a02dc0001, 0x792a17f602dd0001, 0x91201ad302de0001, 0xabf31db102df0001, 
	0xc9a4209002e00001, 0xea34237002e10001, 0xda4265102e20001, 0x33f5293302e30001, 0x5d282c1602e40001, 0x893e2efa02e50001, 0xb83831df02e60001, 0xea1734c502e70001, 0x1edc37ac02e80001, 0x56883a9402e90001, 0x911c3d7d02ea0001, 0xce99406702eb0001, 0xf00435202ec0001, 0x5252463e02ed0001, 0x9890492b02ee0001, 0xe1bb4c1902ef0001, 
	0x2dd44f0802f00001, 0x7cdc51f802f10001, 0xced454e902f20001, 0x23bd57db02f30001, 0x7b985ace02f40001, 0xd6665dc202f50001, 0x342860b702f60001, 0x94df63ad02f70001, 0xf88c66a402f80001, 0x5f30699c02f90001, 0xc8cc6c9502fa0001, 0x35616f8f02fb0001, 0xa4f0728a02fc0001, 0x177a758602fd0001, 0x8d00788302fe0001, 0x5837b8102ff0001, 
	0x81047e8003000001, 0xff84818003010001, 0x8104848103020001, 0x585878303030001, 0x8d088a8603040001, 0x178e8d8a03050001, 0xa518908f03060001, 0x35a7939503070001, 0xc93c969c03080001, 0x5fd899a403090001, 0xf97c9cad030a0001, 0x96299fb7030b0001, 0x35e0a2c2030c0001, 0xd8a2a5ce030d0001, 0x7e70a8db030e0001, 0x274babe9030f0001, 
	0xd334aef803100001, 0x822cb20803110001, 0x3434b51903120001, 0xe94db82b03130001, 0xa178bb3e03140001, 0x5cb6be5203150001, 0x1b08c16703160001, 0xdc6fc47d03170001, 0xa0ecc79403180001, 0x6880caac03190001, 0x332ccdc5031a0001, 0xf1d0df031b0001, 0xd1d0d3fa031c0001, 0xa5cad716031d0001, 0x7ce0da33031e0001, 0x5713dd51031f0001, 
	0x3464e07003200001, 0x14d4e39003210001, 0xf864e6b103220001, 0xdf15e9d303230001, 0xc8e8ecf603240001, 0xb5def01a03250001, 0xa5f8f33f03260001, 0x9937f66503270001, 0x8f9cf98c03280001, 0x8928fcb403290001, 0x85dcffdd032a0001, 0x85ba0307032b0001, 0x88c10632032c0001, 0x8ef3095e032d0001, 0x98510c8b032e0001, 0xa4dc0fb9032f0001, 
	0xb49512e803300001, 0xc77d161803310001, 0xdd95194903320001, 0xf6de1c7b03330001, 0x13591fae03340001, 0x330722e203350001, 0x55e9261703360001, 0x7c00294d03370001, 0xa54d2c8403380001, 0xd1d12fbc03390001, 0x18d32f5033a0001, 0x3482362f033b0001, 0x6ab1396a033c0001, 0xa41b3ca6033d0001, 0xe0c13fe3033e0001, 0x20a44321033f0001, 
	0x63c5466003400001, 0xaa2549a003410001, 0xf3c54ce103420001, 0x40a6502303430001, 0x90c9536603440001, 0xe42f56aa03450001, 0x3ad959ef03460001, 0x94c85d3503470001, 0xf1fd607c03480001, 0x527963c403490001, 0xb63d670d034a0001, 0x1d4a6a57034b0001, 0x87a16da2034c0001, 0xf54370ee034d0001, 0x6631743b034e0001, 0xda6c7789034f0001, 
	0x51f57ad803500001, 0xcccd7e2803510001, 0x4af5817903520001, 0xcc6e84cb03530001, 0x5139881e03540001, 0xd9578b7203550001, 0x64c98ec703560001, 0xf390921d03570001, 0x85ad957403580001, 0x1b2198cc03590001, 0xb3ed9c25035a0001, 0x50129f7f035b0001, 0xef91a2da035c0001, 0x926ba636035d0001, 0x38a1a993035e0001, 0xe234acf1035f0001, 
	0x8f25b05003600001, 0x3f75b3b003610001, 0xf325b71103620001, 0xaa36ba7303630001, 0x64a9bdd603640001, 0x227fc13a03650001, 0xe3b9c49f03660001, 0xa858c80503670001, 0x705dcb6c03680001, 0x3bc9ced403690001, 0xa9dd23d036a0001, 0xdcdad5a7036b0001, 0xb281d912036c0001, 0x8b93dc7e036d0001, 0x6811dfeb036e0001, 0x47fce359036f0001, 
	0x2b55e6c803700001, 0x121dea3803710001, 0xfc55eda903720001, 0xe9fef11b03730001, 0xdb19f48e03740001, 0xcfa7f80203750001, 0xc7a9fb7703760001, 0xc320feed03770001, 0xc20e026403780001, 0xc47205dc03790001, 0xca4e0955037a0001, 0xd3a30ccf037b0001, 0xe072104a037c0001, 0xf0bc13c6037d0001, 0x4821743037e0001, 0x1bc51ac1037f0001, 
	0x36861e4003800001, 0x54c621c003810001, 0x7686254103820001, 0x9bc728c303830001, 0xc48a2c4603840001, 0xf0d02fca03850001, 0x209a334f03860001, 0x53e936d503870001, 0x8abe3a5c03880001, 0xc51a3de403890001, 0x2fe416d038a0001, 0x446b44f7038b0001, 0x89624882038c0001, 0xd1e44c0e038d0001, 0x1df24f9b038e0001, 0x6d8d5329038f0001, 
	0xc0b656b803900001, 0x176e5a4803910001, 0x71b65dd903920001, 0xcf8f616b03930001, 0x30fa64fe03940001, 0x95f8689203950001, 0xfe8a6c2703960001, 0x6ab16fbd03970001, 0xda6e735403980001, 0x4dc276ec03990001, 0xc4ae7a85039a0001, 0x3f337e1f039b0001, 0xbd5281ba039c0001, 0x3f0c8556039d0001, 0xc46288f3039e0001, 0x4d558c91039f0001, 
	0xd9e6903003a00001, 0x6a1693d003a10001, 0xfde6977103a20001, 0x95579b1303a30001, 0x306a9eb603a40001, 0xcf20a25a03a50001, 0x717aa5ff03a60001, 0x1779a9a503a70001, 0xc11ead4c03a80001, 0x6e6ab0f403a90001, 0x1f5eb49d03aa0001, 0xd3fbb84703ab0001, 0x8c42bbf203ac0001, 0x4834bf9e03ad0001, 0x7d2c34b03ae0001, 0xcb1dc6f903af0001, 
	0x9216caa803b00001, 0x5cbece5803b10001, 0x2b16d20903b20001, 0xfd1fd5bb03b30001, 0xd2dad96e03b40001, 0xac48dd2203b50001, 0x896ae0d703b60001, 0x6a41e48d03b70001, 0x4ecee84403b80001, 0x3712ebfc03b90001, 0x230eefb503ba0001, 0x12c3f36f03bb0001, 0x632f72a03bc0001, 0xfd5cfae603bd0001, 0xf842fea303be0001, 0xf6e6026103bf0001, 
	0xf947062003c00001, 0xff6709e003c10001, 0x9470da103c20001, 0x16e8116303c30001, 0x284b152603c40001, 0x3d7118ea03c50001, 0x565b1caf03c60001, 0x730a207503c70001, 0x937f243c03c80001, 0xb7bb280403c90001, 0xdfbf2bcd03ca0001, 0xb8c2f9703cb0001, 0x3b23336203cc0001, 0x6e85372e03cd0001, 0xa5b33afb03ce0001, 0xe0ae3ec903cf0001, 
	0x1f77429803d00001, 0x620f466803d10001, 0xa8774a3903d20001, 0xf2b04e0b03d30001, 0x40bb51de03d40001, 0x929955b203d50001, 0xe84b598703d60001, 0x41d25d5d03d70001, 0x9f2f613403d80001, 0x63650c03d90001, 0x656f68e503da0001, 0xce546cbf03db0001, 0x3b13709a03dc0001, 0xabad747603dd0001, 0x2023785303de0001, 0x98767c3103df0001, 
	0x14a7801003e00001, 0x94b783f003e10001, 0x18a787d103e20001, 0xa0788bb303e30001, 0x2c2b8f9603e40001, 0xbbc1937a03e50001, 0x4f3b975f03e60001, 0xe69a9b4503e70001, 0x81df9f2c03e80001, 0x210ba31403e90001, 0xc41fa6fd03ea0001, 0x6b1caae703eb0001, 0x1603aed203ec0001, 0xc4d5b2be03ed0001, 0x7793b6ab03ee0001, 0x2e3eba9903ef0001, 
	0xe8d7be8803f00001, 0xa75fc27803f10001, 0x69d7c66903f20001, 0x3040ca5b03f30001, 0xfa9bce4e03f40001, 0xc8e9d24203f50001, 0x9b2bd63703f60001, 0x7162da2d03f70001, 0x4b8fde2403f80001, 0x29b3e21c03f90001, 0xbcfe61503fa0001, 0xf1e4ea0f03fb0001, 0xdbf3ee0a03fc0001, 0xc9fdf20603fd0001, 0xbc03f60303fe0001, 0xb206fa0103ff0001, 
};
// cland format off